// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "src/pockets/Aavev3Pocket.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract Aavev3PocketDeployer is Script {
    Aavev3Pocket internal aavev3Pocket;
    ProxyAdmin internal aavev3PocketProxyAdmin;
    address internal aavev3PocketImplementation;

    function deployAavev3PocketTransparent(address proxyAdminOwner, address vault_, address underlyingToken_, address overlyingToken_, address aavePool)
        internal
        returns (address implementation, address proxyAdmin, address proxy)
    {
        bytes memory initData = abi.encodeCall(BasePocket.initialize, ());

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        aavev3PocketImplementation = address(new Aavev3Pocket(vault_, underlyingToken_, overlyingToken_, aavePool));
        aavev3Pocket = Aavev3Pocket(address(new TransparentUpgradeableProxy(aavev3PocketImplementation, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        aavev3PocketProxyAdmin =
            ProxyAdmin(address(uint160(uint256(vm.load(address(aavev3Pocket), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103")))));

        return (aavev3PocketImplementation, address(aavev3PocketProxyAdmin), address(aavev3Pocket));
    }

    function deployAavev3PocketImplementation(address vault_, address underlyingToken_, address overlyingToken_, address aavePool)
        internal
        returns (address implementation)
    {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new Aavev3Pocket(vault_, underlyingToken_, overlyingToken_, aavePool));
        vm.stopBroadcast();
    }
}
