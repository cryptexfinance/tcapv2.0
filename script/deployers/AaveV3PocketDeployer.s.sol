// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "src/pockets/AaveV3Pocket.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract AaveV3PocketDeployer is Script {
    AaveV3Pocket internal aaveV3Pocket;
    ProxyAdmin internal aaveV3PocketProxyAdmin;
    address internal aaveV3PocketImplementation;

    function deployAavePocket() internal returns (address){
        address vaultAddress = vm.getDeployment("Vault");
        address underlyingToken = 0x94a9D9AC8a22534E3FaCa9F4e7F2E2cf85d5E4C8;
        address aavePool = 0x6Ae43d3271ff6888e7Fc43Fd7321a503ff738951;
        return deployAaveV3PocketImplementation(vaultAddress, underlyingToken, aavePool);
    }


    function deployAaveV3PocketTransparent(address proxyAdminOwner, address vault_, address underlyingToken_, address aavePool)
        internal
        returns (address implementation, address proxyAdmin, address proxy)
    {
        bytes memory initData = abi.encodeCall(AaveV3Pocket.initialize, ());

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        aaveV3PocketImplementation = address(new AaveV3Pocket(vault_, underlyingToken_, aavePool));
        aaveV3Pocket = AaveV3Pocket(address(new TransparentUpgradeableProxy(aaveV3PocketImplementation, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        aaveV3PocketProxyAdmin =
            ProxyAdmin(address(uint160(uint256(vm.load(address(aaveV3Pocket), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103")))));

        return (aaveV3PocketImplementation, address(aaveV3PocketProxyAdmin), address(aaveV3Pocket));
    }

    function deployAaveV3PocketImplementation(address vault_, address underlyingToken_, address aavePool) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new AaveV3Pocket(vault_, underlyingToken_, aavePool));
        AaveV3Pocket(implementation).initialize();
        vm.stopBroadcast();
    }
}
