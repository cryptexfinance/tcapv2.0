// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "src/pockets/BasePocket.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract BasePocketDeployer is Script {
    BasePocket internal basePocket;
    ProxyAdmin internal basePocketProxyAdmin;
    address internal basePocketImplementation;

    function deployBasePocketTransparent(address proxyAdminOwner, address vault_, address underlyingToken_, address overlyingToken_)
        internal
        returns (address implementation, address proxyAdmin, address proxy)
    {
        bytes memory initData = abi.encodeCall(BasePocket.initialize, ());

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        basePocketImplementation = address(new BasePocket(vault_, underlyingToken_, overlyingToken_));
        basePocket = BasePocket(address(new TransparentUpgradeableProxy(basePocketImplementation, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        basePocketProxyAdmin =
            ProxyAdmin(address(uint160(uint256(vm.load(address(basePocket), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103")))));

        return (basePocketImplementation, address(basePocketProxyAdmin), address(basePocket));
    }

    function deployBasePocketImplementation(address vault_, address underlyingToken_, address overlyingToken_) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new BasePocket(vault_, underlyingToken_, overlyingToken_));
        vm.stopBroadcast();
    }
}
