// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "src/TCAPV2.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract TCAPV2Deployer is Script {
    TCAPV2 internal tCAPV2;
    ProxyAdmin internal tCAPV2ProxyAdmin;
    address internal tCAPV2Implementation;

    function deployTCAPV2Transparent(address proxyAdminOwner, address admin) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeCall(TCAPV2.initialize, (admin));

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        tCAPV2Implementation = address(new TCAPV2());
        tCAPV2 = TCAPV2(address(new TransparentUpgradeableProxy(tCAPV2Implementation, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        tCAPV2ProxyAdmin =
            ProxyAdmin(address(uint160(uint256(vm.load(address(tCAPV2), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103")))));

        return (tCAPV2Implementation, address(tCAPV2ProxyAdmin), address(tCAPV2));
    }

    function deployTCAPV2Implementation() internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new TCAPV2());
        vm.stopBroadcast();
    }
}
