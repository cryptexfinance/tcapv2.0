// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

////////////////////////////////////////////////////
// AUTOGENERATED - DO NOT EDIT THIS FILE DIRECTLY //
////////////////////////////////////////////////////

import "forge-std/Script.sol";

import "src/Vault.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {TransparentUpgradeableProxy, ITransparentUpgradeableProxy} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";

abstract contract VaultDeployer is Script {
    Vault internal vault;
    ProxyAdmin internal vaultProxyAdmin;
    address internal vaultImplementation;

    function deployVaultTransparent(
        address proxyAdminOwner,
        ITCAPV2 tCAPV2_,
        IERC20 collateral_,
        IPermit2 permit2_,
        address admin,
        uint16 initialFee,
        address oracle_,
        address feeRecipient_,
        IVault.LiquidationParams memory liquidationParams_
    ) internal returns (address implementation, address proxyAdmin, address proxy) {
        bytes memory initData = abi.encodeCall(Vault.initialize, (admin, initialFee, oracle_, feeRecipient_, liquidationParams_));

        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));

        vaultImplementation = address(new Vault(tCAPV2_, collateral_, permit2_));
        vault = Vault(address(new TransparentUpgradeableProxy(vaultImplementation, proxyAdminOwner, initData)));

        vm.stopBroadcast();

        vaultProxyAdmin = ProxyAdmin(address(uint160(uint256(vm.load(address(vault), hex"b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103")))));
        console.log("Collateral address, vault address:", address(collateral_), address(vaultProxyAdmin));

        return (vaultImplementation, address(vaultProxyAdmin), address(vault));
    }

    function deployVaultImplementation(ITCAPV2 tCAPV2_, IERC20 collateral_, IPermit2 permit2_) internal returns (address implementation) {
        vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
        implementation = address(new Vault(tCAPV2_, collateral_, permit2_));
        vm.stopBroadcast();
    }
}
